# Gets relevant movie information from a sqlite database (generated by
# imdb2sql.py) and writes it to a MongoDB collection.

from __future__ import print_function

import os
import operator
from functools import reduce
from datetime import datetime

import sqlite3
from dateutil import parser

from imdb import IMDb
from pymongo import MongoClient

root_path = os.path.dirname(os.path.realpath(__file__))
path = root_path + "/imdb.sqlite"
conn = sqlite3.connect(path)
cur = conn.cursor()
cur2 = conn.cursor()

ia = IMDb('sql', uri='sqlite://' + path)

db = MongoClient().imdb


def parse_team(movie):
    team = {}

    for c in ['director', 'producer', 'writer', 'cast']:
        team[c] = list(set([x.getID() for x in movie.get(c, [])]))

    team['full'] = list(set(reduce(operator.add, team.values(), [])))
    team['size'] = len(team['full'])

    return team


def parse_release(m):
    date = None

    if 'release dates' in m.keys() and m['release dates']:
        try:
            date = parser.parse(m['release dates'][0].split(':')[1])
        except:
            pass

    if not date and m.get('year'):
        date = datetime.strptime(str(m['year']), '%Y')
    else:
        date = None

    return date

counter = 0
total_counter = 0
cur.execute("SELECT id FROM title WHERE kind_id = 1")

while True:
    row = cur.fetchone()
    if not row:
        break

    total_counter += 1
    if total_counter % 100 == 0:
        print (total_counter)

    if db.movies.find_one({'_id': row[0]}):
        continue

    m = ia.get_movie(row[0])
    ia.update(m, 'locations')

    reg = {'team': parse_team(m),
           'votes': m.get('votes'),
           'genres': m.get('genres', None),
           'rating': m.get('rating'),
           'release': parse_release(m),
           'country': m.get('country', None),
           'locations': m.get('locations', None),
           'budget': m.get('business', {}).get('budget'),
           'gross': m.get('business', {}).get('gross'),
           'title': m['title']}

    if len(reg['team']['full']) < 2:
        continue

    if not all([reg[x] for x in ['rating', 'votes', 'release']]):
        continue

    db.movies.update({'_id': m.getID()}, reg, upsert=True)
    counter += 1
    if counter % 10 == 0 or total_counter % 100 == 0:
        print ("{}/{} registers updated.".format(counter, total_counter))

conn.close()
